//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/KeyboardControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyboardControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardControls"",
    ""maps"": [
        {
            ""name"": ""PlayDrums"",
            ""id"": ""7985b908-eebd-4001-b11c-afe93d54d43a"",
            ""actions"": [
                {
                    ""name"": ""PlayHihat"",
                    ""type"": ""Button"",
                    ""id"": ""007b3178-d3d1-410b-b68a-c7a978ca31ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayCrash"",
                    ""type"": ""Button"",
                    ""id"": ""3b7b3740-ec7d-4444-a26c-cb713ac5d24c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayBass"",
                    ""type"": ""Button"",
                    ""id"": ""54d484f9-164f-465a-a163-a33dee4dadb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaySnare"",
                    ""type"": ""Button"",
                    ""id"": ""b3a0241b-d777-43f5-b22f-e7e29e835227"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b2d79c4-0223-4374-98e5-5543d2321449"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHihat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1acd72f8-80ef-4996-8764-e9d5d4a92063"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHihat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5cf2908-2832-4733-a920-6a14f3e84b97"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayCrash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcbf04ac-fb90-45a3-be63-2dc45735c134"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayCrash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24985295-210c-4452-b245-28fb6137b5bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayBass"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf487faa-7f07-41ff-8b8f-ff78ce3412a8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayBass"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""becf4fba-6d63-4cb9-859b-1bedf3dcff41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaySnare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62521739-21b1-4bf4-9871-7df3c60ebe3f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaySnare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayDrums
        m_PlayDrums = asset.FindActionMap("PlayDrums", throwIfNotFound: true);
        m_PlayDrums_PlayHihat = m_PlayDrums.FindAction("PlayHihat", throwIfNotFound: true);
        m_PlayDrums_PlayCrash = m_PlayDrums.FindAction("PlayCrash", throwIfNotFound: true);
        m_PlayDrums_PlayBass = m_PlayDrums.FindAction("PlayBass", throwIfNotFound: true);
        m_PlayDrums_PlaySnare = m_PlayDrums.FindAction("PlaySnare", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayDrums
    private readonly InputActionMap m_PlayDrums;
    private List<IPlayDrumsActions> m_PlayDrumsActionsCallbackInterfaces = new List<IPlayDrumsActions>();
    private readonly InputAction m_PlayDrums_PlayHihat;
    private readonly InputAction m_PlayDrums_PlayCrash;
    private readonly InputAction m_PlayDrums_PlayBass;
    private readonly InputAction m_PlayDrums_PlaySnare;
    public struct PlayDrumsActions
    {
        private @KeyboardControls m_Wrapper;
        public PlayDrumsActions(@KeyboardControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayHihat => m_Wrapper.m_PlayDrums_PlayHihat;
        public InputAction @PlayCrash => m_Wrapper.m_PlayDrums_PlayCrash;
        public InputAction @PlayBass => m_Wrapper.m_PlayDrums_PlayBass;
        public InputAction @PlaySnare => m_Wrapper.m_PlayDrums_PlaySnare;
        public InputActionMap Get() { return m_Wrapper.m_PlayDrums; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayDrumsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayDrumsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayDrumsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayDrumsActionsCallbackInterfaces.Add(instance);
            @PlayHihat.started += instance.OnPlayHihat;
            @PlayHihat.performed += instance.OnPlayHihat;
            @PlayHihat.canceled += instance.OnPlayHihat;
            @PlayCrash.started += instance.OnPlayCrash;
            @PlayCrash.performed += instance.OnPlayCrash;
            @PlayCrash.canceled += instance.OnPlayCrash;
            @PlayBass.started += instance.OnPlayBass;
            @PlayBass.performed += instance.OnPlayBass;
            @PlayBass.canceled += instance.OnPlayBass;
            @PlaySnare.started += instance.OnPlaySnare;
            @PlaySnare.performed += instance.OnPlaySnare;
            @PlaySnare.canceled += instance.OnPlaySnare;
        }

        private void UnregisterCallbacks(IPlayDrumsActions instance)
        {
            @PlayHihat.started -= instance.OnPlayHihat;
            @PlayHihat.performed -= instance.OnPlayHihat;
            @PlayHihat.canceled -= instance.OnPlayHihat;
            @PlayCrash.started -= instance.OnPlayCrash;
            @PlayCrash.performed -= instance.OnPlayCrash;
            @PlayCrash.canceled -= instance.OnPlayCrash;
            @PlayBass.started -= instance.OnPlayBass;
            @PlayBass.performed -= instance.OnPlayBass;
            @PlayBass.canceled -= instance.OnPlayBass;
            @PlaySnare.started -= instance.OnPlaySnare;
            @PlaySnare.performed -= instance.OnPlaySnare;
            @PlaySnare.canceled -= instance.OnPlaySnare;
        }

        public void RemoveCallbacks(IPlayDrumsActions instance)
        {
            if (m_Wrapper.m_PlayDrumsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayDrumsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayDrumsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayDrumsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayDrumsActions @PlayDrums => new PlayDrumsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayDrumsActions
    {
        void OnPlayHihat(InputAction.CallbackContext context);
        void OnPlayCrash(InputAction.CallbackContext context);
        void OnPlayBass(InputAction.CallbackContext context);
        void OnPlaySnare(InputAction.CallbackContext context);
    }
}
